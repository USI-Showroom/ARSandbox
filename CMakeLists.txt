cmake_minimum_required(VERSION 2.8)

project(ARSandBox)


IF(WIN32)
	SET(CMAKE_PREFIX_PATH "C:\\Qt\\5.5\\msvc2013")
ENDIF()


###########################
# Sources
file(GLOB_RECURSE ARSANDBOX_SOURCES "src/*.cpp")
file(GLOB_RECURSE ARSANDBOX_HEADERS "src/*.hpp")

file(GLOB_RECURSE ARSANDBOX_QT_SRC_HEADERS "src/qt/*.hpp" "src/game/*.hpp")
file(GLOB_RECURSE ARSANDBOX_UIS "src/qt/*.ui")
file(GLOB_RECURSE ARSANDBOX_RESOURCES "src/resource/*.qrc")

SET(ARSANDBOX_MAIN "src/main.cpp")
SET(ARSANDBOX_INCLUDE "src" "src/qt" "src/kinect" "src/geom" "src/game")
#########################

#########################
# Libs
FIND_PACKAGE(Qt5 COMPONENTS Core Gui Xml OpenGL Widgets REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Core_DEFINITIONS})
SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5Core_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Gui_DEFINITIONS})
SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5Gui_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Xml_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Xml_DEFINITIONS})
SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5Xml_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5OpenGL_DEFINITIONS})
SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5OpenGL_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Widgets_DEFINITIONS})
SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5Widgets_LIBRARIES})


IF(WIN32)
    FIND_PACKAGE(Qt5 COMPONENTS Winextras REQUIRED) 

    INCLUDE_DIRECTORIES(${Qt5Winextras_INCLUDE_DIRS})
    ADD_DEFINITIONS(${Qt5Winextras_DEFINITIONS})
    SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; ${Qt5Winextras_LIBRARIES})

    SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES}; "$ENV{KINECTSDK20_DIR}\\Lib\\x86\\Kinect20.lib")

    INCLUDE_DIRECTORIES("$ENV{KINECTSDK20_DIR}\\inc")
ENDIF()

FIND_PACKAGE(OpenGL REQUIRED)
IF(OPENGL_FOUND)         
    SET(ARSANDBOX_LINK_LIBRARIES ${ARSANDBOX_LINK_LIBRARIES} ${OPENGL_LIBRARIES})   
    INCLUDE_DIRECTORIES(${QT_QTOPENGL_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} )
ELSE()
    message(FATAL_ERROR "OpenGl not found!")
ENDIF()
#########################

#########################
# QT
set(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTOPENGL TRUE)

QT5_WRAP_CPP(ARSANDBOX_HEADERS_MOC ${ARSANDBOX_QT_SRC_HEADERS})  
QT5_WRAP_UI(ARSANDBOX_FORMS_HEADERS ${ARSANDBOX_UIS})  
QT5_ADD_RESOURCES(ARSANDBOX_RESOURCES_RCC ${ARSANDBOX_RESOURCES}) 
######################### 



set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -Wall")

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")


INCLUDE_DIRECTORIES(${ARSANDBOX_INCLUDE})

SET(ARSANDBOX_SOURCES ${ARSANDBOX_MAIN}; ${ARSANDBOX_SOURCES}; ${VESTIGE_RESOURCES_RCC})


add_executable(ARSandBox ${ARSANDBOX_SOURCES} ${ARSANDBOX_HEADERS_MOC} ${ARSANDBOX_FORMS_HEADERS} ${ARSANDBOX_HEADERS} ${ARSANDBOX_RESOURCES_RCC})
TARGET_LINK_LIBRARIES(ARSandBox ${ARSANDBOX_LINK_LIBRARIES})


